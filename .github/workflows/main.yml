name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Create or update RDP User with fixed password
        shell: pwsh
        run: |
          # Fixed password as requested
          $password = "KUTYAcica01!"

          # Convert to secure string (needed by New-LocalUser / Set-LocalUser)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # If user exists, update password; otherwise create user
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
            Write-Host "User 'RDP' already exists — updating password..."
            try {
              Set-LocalUser -Name "RDP" -Password $securePass -ErrorAction Stop
            } catch {
              Write-Host "Hiba a jelszó beállításakor: $_"
              exit 1
            }
          } else {
            Write-Host "Creating local user 'RDP'..."
            try {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -Description "Created by workflow"
            } catch {
              Write-Host "Hiba a felhasználó létrehozásakor: $_"
              exit 1
            }
          }

          # Ensure the user is in Administrators and Remote Desktop Users groups
          try {
            if (-not (Get-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue)) {
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            }
            if (-not (Get-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue)) {
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
            }
          } catch {
            Write-Host "Hiba a csoportok beállításakor: $_"
            # nem feltétlen exit; folytathatjuk, de jelezzük
          }

          # Export the credentials string to GITHUB_ENV so later steps can read it
          echo "RDP_CREDS=User: RDP | Password: KUTYAcica" >> $env:GITHUB_ENV

          # Verify user exists
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation or update failed"
              exit 1
          } else {
              Write-Host "RDP user ready (Password: KUTYAcica)"
          }


      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: KUTYAcica" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV







      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }

