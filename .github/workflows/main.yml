name: RDP + noVNC

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and disable NLA if needed
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue

      - name: Create or update RDP User (handle existing user + fallback passwords)
        shell: pwsh
        run: |
          function Set-UserAndGroups {
          param($UserName, $PlainPassword)
          $secure = ConvertTo-SecureString $PlainPassword -AsPlainText -Force
    
          if (Get-LocalUser -Name $UserName -ErrorAction SilentlyContinue) {
              Write-Host "User '$UserName' létezik — jelszó frissítése..."
              Set-LocalUser -Name $UserName -Password $secure -ErrorAction Stop
            } else {
              Write-Host "User '$UserName' nem létezik — létrehozás..."
              New-LocalUser -Name $UserName -Password $secure -AccountNeverExpires -Description "Created by workflow" -ErrorAction Stop
            }
      
            try {
              if (-not (Get-LocalGroupMember -Group "Administrators" -Member $UserName -ErrorAction SilentlyContinue)) {
                Add-LocalGroupMember -Group "Administrators" -Member $UserName -ErrorAction SilentlyContinue
              }
              if (-not (Get-LocalGroupMember -Group "Remote Desktop Users" -Member $UserName -ErrorAction SilentlyContinue)) {
                Add-LocalGroupMember -Group "Remote Desktop Users" -Member $UserName -ErrorAction SilentlyContinue
              }
            } catch {
              Write-Warning "Figyelmeztetés a csoporttagság beállításakor: $_"
            }
      
            return $PlainPassword
          }
      
          $UserName = "RDP"
          $desired = "KUTYAcica"
          $fallback = "KUTYAcica01!"
          $pwdUsed = $null
      
          try {
            $pwdUsed = Set-UserAndGroups -UserName $UserName -PlainPassword $desired
            Write-Host "Siker: beállított jelszó: $desired"
          } catch {
            Write-Warning "A kívánt jelszó elutasítva: $_"
            try {
              $pwdUsed = Set-UserAndGroups -UserName $UserName -PlainPassword $fallback
              Write-Host "Siker: beállított fallback jelszó: $fallback"
            } catch {
              Write-Warning "Fallback jelszóval sem sikerült: $_"
              Write-Host "Generálok egy policy-kompatibilis jelszót..."
              $upper = -join ((65..90) | Get-Random -Count 4 | ForEach-Object {[char]$_})
              $lower = -join ((97..122) | Get-Random -Count 4 | ForEach-Object {[char]$_})
              $digits = -join ((48..57) | Get-Random -Count 2 | ForEach-Object {[char]$_})
              $specials = "@#%&*!"
              $special = ($specials.ToCharArray() | Get-Random -Count 1) -join ''
              $gen = ($upper + $lower + $digits + $special)
              if ($gen.Length -lt 12) { $gen += "A1!" }
              try {
                $pwdUsed = Set-UserAndGroups -UserName $UserName -PlainPassword $gen
                Write-Host "Siker: generált jelszó beállítva."
              } catch {
                Write-Error "Nem sikerült jelszót beállítani egyik próbálkozással sem: $_"
                exit 1
              }
            }
          }
      
          if (-not (Get-LocalUser -Name $UserName -ErrorAction SilentlyContinue)) {
            Write-Error "User creation/update failed"
            exit 1
          }
      
          # Maszkolás a logban (GitHub Actions speciális formátum)
          Write-Host "::add-mask::$pwdUsed"
      
          # Írás GITHUB_ENV-be (ez a biztonságos mód, elkerüli a PowerShell változóparsing hibákat)
          Add-Content -Path $env:GITHUB_ENV -Value ("RDP_CREDS={0}:{1}" -f $UserName, $pwdUsed)
          Add-Content -Path $env:GITHUB_ENV -Value ("RDP_USER={0}" -f $UserName)
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASSWORD_SET=1"
      
          Write-Host "Felhasználó készen."
      

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection (Windows)
        shell: pwsh
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned. Exiting."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection to RDP port 3389 failed"; exit 1 }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"

          # Próbáljuk beolvasni a GITHUB_ENV fájlból (ha létezik) a RDP_CREDS sort
          $creds = $null
          if (Test-Path $env:GITHUB_ENV) {
            $line = Get-Content -Path $env:GITHUB_ENV | Where-Object { $_ -match '^RDP_CREDS=' } | Select-Object -First 1
            if ($line) {
              # eltávolítjuk a kulcsot, csak a "User:Pass" részt hagyjuk meg
              $creds = $line -replace '^RDP_CREDS=', ''
            }
          }

          # fallback: ha nem találtunk, használjuk a környezeti változót (ha be van állítva)
          if (-not $creds -or $creds -eq '') {
            if ($env:RDP_CREDS) { $creds = $env:RDP_CREDS }
          }

          if ($creds) {
            # NE írd ki a jelszót — csak mutassuk, hogy van érték (maszkolva)
            Write-Host "Password: (masked) — stored in RDP_CREDS"
            # Ha nagyon kell, ki tudsz belőle egy részt mutatni, pl. csak a felhasználó:
            $userPart = ($creds -split ':')[0]
            Write-Host "User from stored creds: $userPart"
          } else {
            Write-Host "Password: (not available)"
          }

          Write-Host "==================`n"

          # keep runner alive
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }


  novnc:
    # no 'needs' here - fut párhuzamosan
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      VNC_PASSWORD: "vncpass123"   # változtasd erősre
      NOVNC_PORT: "6080"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps and XFCE + TightVNC + websockify
        shell: bash
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update -y
          sudo DEBIAN_FRONTEND=noninteractive apt install -y xfce4 xfce4-goodies tightvncserver git python3-pip wget unzip
          sudo pip3 install --upgrade websockify

      - name: Set VNC password non-interactively and start VNC
        shell: bash
        run: |
          USER_HOME=/home/$(whoami)
          mkdir -p $USER_HOME/.vnc
          printf "%s\n" "$VNC_PASSWORD" "$VNC_PASSWORD" "" | vncpasswd -f > $USER_HOME/.vnc/passwd || true
          chmod 600 $USER_HOME/.vnc/passwd
          DISPLAY_NUM=":1"
          pkill Xtightvnc || true
          tightvncserver $DISPLAY_NUM -geometry 1280x800 -depth 24
          sleep 2

      - name: Install noVNC and start websockify
        shell: bash
        run: |
          if [ ! -d /usr/share/novnc ]; then
            sudo git clone https://github.com/novnc/noVNC.git /tmp/novnc_tmp
            sudo mkdir -p /usr/share/novnc
            sudo cp -r /tmp/novnc_tmp/. /usr/share/novnc
          fi
          nohup websockify ${NOVNC_PORT} localhost:5901 --web /usr/share/novnc > /tmp/novnc.log 2>&1 &
          sleep 2
          echo "noVNC should be running; check /tmp/novnc.log"

      - name: Install Tailscale and connect (Ubuntu)
        shell: bash
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-novnc-$GITHUB_RUN_ID
          for i in {1..10}; do
            TSIP=$(tailscale ip -4 || true)
            if [ -n "$TSIP" ]; then echo "TSIP=$TSIP" && break; fi
            sleep 3
          done
          if [ -z "$TSIP" ]; then echo "Tailscale IP not assigned"; exit 1; fi
          echo "TAILSCALE_IP=$TSIP" >> $GITHUB_ENV

      - name: Output noVNC URL
        shell: bash
        run: |
          echo "noVNC should be reachable at: http://$TAILSCALE_IP:${NOVNC_PORT}/vnc.html"
          echo "NOVNC_URL=http://$TAILSCALE_IP:${NOVNC_PORT}/vnc.html" >> $GITHUB_OUTPUT

      - name: Keep novnc job alive and show logs
        shell: bash
        run: |
          echo "=== noVNC logs ===" && tail -n +1 /tmp/novnc.log || true
          while true; do sleep 300; done
