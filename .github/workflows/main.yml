name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV


      - name: Install RustDesk 1.4.2, set password, and print ID+masked password
        shell: pwsh
        run: |
          # --------- 1) Letöltés -----------
          $url = "https://github.com/rustdesk/rustdesk/releases/download/1.4.2/rustdesk-1.4.2-x86_64.exe"
          $installer = "$env:TEMP\RustDesk.exe"
          Write-Host "Letöltés: $url"
          Invoke-WebRequest -Uri $url -OutFile $installer

          # --------- 2) Telepítés silent -----------
          Write-Host "Silent telepítés..."
          Write-Host "Silent telepítés (no wait, force continue)..."
          $p = Start-Process -FilePath $installer -ArgumentList "--silent-install" -PassThru
          Start-Sleep -Seconds 20
          if (!$p.HasExited) {
              Write-Host "Telepítő még fut, leállítom..."
              try { Stop-Process -Id $p.Id -Force -ErrorAction SilentlyContinue } catch {}
          }
          Write-Host "Telepítés befejezve (folytatás)..."

          Remove-Item $installer -Force -ErrorAction SilentlyContinue

          # --------- 3) Megkeressük a telepített futtathatót -----------
          Write-Host "Keresem a RustDesk futtathatót..."
          $searchPaths = @(
            "C:\Program Files*",
            "C:\Program Files (x86)*",
            "C:\Users\runneradmin\AppData\Local",
            "C:\Users\runneradmin\AppData\Roaming"
          )
          $possible = $null
          foreach ($p in $searchPaths) {
            $found = Get-ChildItem -Path $p -Filter "rustdesk.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $possible = $found
              break
            }
          }
          if (-not $possible) {
            Write-Error "❌ RustDesk nem található egyik ismert helyen sem!"
            exit 1
          }
          $rustdeskExe = $possible.FullName
          Write-Host "✅ RustDesk helye: $rustdeskExe"

          if (-not $possible) {
            Write-Error "RustDesk nem található a várt helyeken. Telepítés sikertelen."
            exit 1
          }
          $rustdeskExe = $possible.FullName
          Write-Host "RustDesk helye: $rustdeskExe"

          # --------- 4) Jelszó (secret) ellenőrzése -----------
          if (-not $env:RUSTDESK_PASSWORD) {
            Write-Error "RUSTDESK_PASSWORD secret nincs beállítva! Add meg a repo Secrets-ben."
            exit 1
          }
          $pwd = $env:RUSTDESK_PASSWORD

          # Maszkoljuk a jelszót a GitHub logban
          Write-Host "::add-mask::$pwd"

          # --------- 5) Beállítjuk az unattended jelszót -----------
          Write-Host "RustDesk unattended password beállítása..."
          & $rustdeskExe --password $pwd
          Start-Sleep -Seconds 2

          # --------- 6) Indítsuk el a RustDesk klienst (szükséges lehet az ID lekéréséhez) -----------
          Write-Host "RustDesk elindítása (háttérben)..."
          Start-Process -FilePath $rustdeskExe -ArgumentList "--minimized" -WorkingDirectory (Split-Path $rustdeskExe) | Out-Null
          Start-Sleep -Seconds 3

          # --------- 7) Lekérjük az ID-t -----------
          Write-Host "RustDesk ID lekérése..."
          $id = & $rustdeskExe --get-id 2>$null
          if (-not $id) {
            Write-Warning "Nem sikerült lekérni az ID-t a CLI-vel. Megpróbálom várni és újraolvasni..."
            Start-Sleep -Seconds 4
            $id = & $rustdeskExe --get-id 2>$null
          }

          if (-not $id) {
            Write-Error "ID lekérése sikertelen. Lehet a verzió nem támogatja a CLI-t vagy a kliens még nem generálta az ID-t."
            $id = "UNKNOWN"
          } else {
            $id = $id.Trim()
            # maszkoljuk az ID-t is a logokban
            Write-Host "::add-mask::$id"
          }

          # --------- 8) Mentés env-be és olvasható összegzés -----------
          echo "RUSTDESK_ID=$id" >> $env:GITHUB_ENV
          echo "RUSTDESK_PASSWORD_SET=1" >> $env:GITHUB_ENV

          Write-Host ""
          Write-Host "=== RUSTDESK HOZZÁFÉRÉS ==="
          Write-Host "ID (connect code): $id"
          Write-Host "Password: (a jelszó a repo secret: RUSTDESK_PASSWORD) - a logban maszkolva."
          Write-Host "==========================="




      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }

