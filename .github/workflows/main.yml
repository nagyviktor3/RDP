name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV


      - name: Install AnyDesk & configure unattended access (PowerShell)
        shell: pwsh
        run: |
          # --- letöltés és telepítés ---
          $url = $env:ANYDESK_INSTALL_URL
          if (-not $url) { $url = "https://download.anydesk.com/AnyDesk.msi" }
          $installer = "$env:TEMP\AnyDesk.msi"
          Write-Host "Downloading AnyDesk..."
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing

          Write-Host "Installing AnyDesk (silent)..."
          Start-Process msiexec.exe -ArgumentList '/i', "`"$installer`"", '/quiet', '/norestart' -Wait

          Remove-Item $installer -Force -ErrorAction SilentlyContinue

          # --- tűzfal megnyitása (szükség esetén) ---
          netsh advfirewall firewall add rule name="AnyDesk-Inbound" dir=in action=allow program="C:\Program Files (x86)\AnyDesk\AnyDesk.exe" enable=yes
          netsh advfirewall firewall add rule name="AnyDesk-Service-Inbound" dir=in action=allow program="C:\Program Files\AnyDesk\AnyDesk.exe" enable=yes

          Start-Sleep -Seconds 3

          # --- útvonalok (2 lehetséges telepítési hely) ---
          $possiblePaths = @(
            "C:\Program Files\AnyDesk\AnyDesk.exe",
            "C:\Program Files (x86)\AnyDesk\AnyDesk.exe",
            "C:\Program Files\AnyDeskMSI\AnyDeskMSI.exe",
            "C:\Program Files (x86)\AnyDeskMSI\AnyDeskMSI.exe"
          )

          $anydeskExe = $possiblePaths | Where-Object { Test-Path $_ } | Select-Object -First 1

          if (-not $anydeskExe) {
            Write-Error "AnyDesk futtatható nem található a várt helyeken."
            exit 1
          }

          Write-Host "AnyDesk elérve itt: $anydeskExe"

          # --- jelszó beállítása unattended access-hez (GitHub Secret) ---
          if (-not $env:ANYDESK_PASSWORD) {
            Write-Error "ANYDESK_PASSWORD secret nincs beállítva!"
            exit 1
          }

          $pwd = $env:ANYDESK_PASSWORD

          # Maszkolás a GitHub logban
          Write-Host "::add-mask::$pwd"

          # A CLI --set-password paraméter használata: pipeljük a jelszót az exe-nek
          # (Sok felhasználói tapasztalat szerint: echo "pwd" | anydesk --set-password)
          Write-Host "Beállítom az unattended jelszót..."
          $setPasswordCmd = "cmd /c echo $pwd| `"$anydeskExe`" --set-password"
          Invoke-Expression $setPasswordCmd

          Start-Sleep -Seconds 2

          # --- lekérjük az AnyDesk ID-t a CLI-vel ---
          Write-Host "Lekérem az AnyDesk ID-t..."
          $id = & $anydeskExe --get-id 2>$null
          if (-not $id) {
            Write-Host "Nem kaptam ID-t a --get-id paranccsal, próbálkozom registry-vel..."
            # Alternatív: keresés Process output vagy registry (nem minden verzió tárolja ugyanúgy)
            $id = (& $anydeskExe --get-id 2>&1) -join "`n"
          }

          if (-not $id) {
            Write-Error "Nem sikerült lekérni az AnyDesk ID-t."
            exit 1
          }

          $id = $id.Trim()
          Write-Host "::add-mask::$id"

          # --- kiírás és env-be mentés (maszkolt) ---
          echo "ANYDESK_ID=$id" >> $env:GITHUB_ENV
          echo "ANYDESK_PASSWORD=***(masked)***" >> $env:GITHUB_ENV

          Write-Host ""
          Write-Host "=== ANYDESK ACCESS ==="
          Write-Host "ID (masked in logs): $id"
          Write-Host "Unattended password: (masked in logs)"
          Write-Host "======================"



      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }

